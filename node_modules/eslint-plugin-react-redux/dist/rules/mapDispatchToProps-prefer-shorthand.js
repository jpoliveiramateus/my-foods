'use strict';

var isReactReduxConnect = require('../isReactReduxConnect');
var utils = require('../utils');

var report = function report(context, node) {
  context.report({
    message: 'mapDispatchToProps should use a shorthand dispatch wrapping instead',
    node
  });
};

var getParamsString = function getParamsString(params, context) {
  return params.map(function (param) {
    return context.getSource(param);
  }).join(',');
};

var propertyCanUseShortHandButDoesnt = function propertyCanUseShortHandButDoesnt(context, prop, dispatchName) {
  var propName = prop.key && prop.key.name;
  var sourceCode = context.getSource(prop.value).replace(/(\r\n|\n|\r|\t| |;)/gm, '');
  if (prop.value && prop.value.type === 'ArrowFunctionExpression') {
    var fncDef = prop.value;
    var paramString = getParamsString(fncDef.params, context);
    var actionNode = prop.value.body && prop.value.body.arguments && prop.value.body.arguments[0];
    var nameFromSourceCode = actionNode && actionNode.callee && actionNode.callee.name;
    if (sourceCode === `(${paramString})=>${dispatchName}(${nameFromSourceCode}(${paramString}))`) {
      return true;
    }
  } else if (prop.value && prop.value.type === 'FunctionExpression') {
    var _fncDef = prop.value;
    var _paramString = getParamsString(_fncDef.params, context);
    if (sourceCode === `function(${_paramString}){return${dispatchName}(${propName}(${_paramString}))}`) {
      return true;
    }
  }
  return false;
};

var checkReturnNode = function checkReturnNode(context, returnNode, dispatchName) {
  if (returnNode.properties.every(function (prop) {
    return propertyCanUseShortHandButDoesnt(context, prop, dispatchName);
  })) {
    report(context, returnNode);
  }
};

module.exports = function (context) {
  return {
    VariableDeclaration(node) {
      node.declarations.forEach(function (decl) {
        if (decl.id && decl.id.name === 'mapDispatchToProps') {
          if (decl.init && (decl.init.type === 'ArrowFunctionExpression' || decl.init.type === 'FunctionExpression')) {
            var returnNode = utils.getReturnNode(decl.init);
            if (returnNode && returnNode.type === 'ObjectExpression') {
              checkReturnNode(context, returnNode, 'dispatch');
            }
          }
        }
      });
    },
    FunctionDeclaration(node) {
      if (node.id && node.id.name === 'mapDispatchToProps') {
        var returnNode = utils.getReturnNode(node.body);
        if (returnNode && returnNode.type === 'ObjectExpression') {
          checkReturnNode(context, returnNode, 'dispatch');
        }
      }
    },
    CallExpression(node) {
      if (isReactReduxConnect(node)) {
        var mapDispatchToProps = node.arguments && node.arguments[1];
        if (mapDispatchToProps && (mapDispatchToProps.type === 'ArrowFunctionExpression' || mapDispatchToProps.type === 'FunctionExpression')) {
          var returnNode = utils.getReturnNode(mapDispatchToProps);
          if (returnNode && returnNode.type === 'ObjectExpression') {
            checkReturnNode(context, returnNode, 'dispatch');
          }
        }
      }
    }
  };
};