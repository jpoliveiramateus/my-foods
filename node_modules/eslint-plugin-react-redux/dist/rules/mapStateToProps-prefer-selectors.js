'use strict';

var isReactReduxConnect = require('../isReactReduxConnect');
var utils = require('../utils');

var reportNoSelector = function reportNoSelector(context, node, name) {
  context.report({
    message: `mapStateToProps property "${name}" should use a selector function.`,
    node
  });
};

var reportWrongName = function reportWrongName(context, node, propName, functionName, matching) {
  context.report({
    message: `mapStateToProps "${propName}"'s selector "${functionName}" does not match "${matching}".`,
    node
  });
};

var reportUnexpectedParam = function reportUnexpectedParam(context, node, propName, functionName, index) {
  context.report({
    message: `mapStateToProps "${propName}"'s selector "${functionName}" parameter #${index} is not expected.`,
    node
  });
};

var reportInvalidParams = function reportInvalidParams(context, node, propName, functionName, params, index) {
  context.report({
    message: `mapStateToProps "${propName}"'s selector "${functionName}" parameter #${index} should be "${params[index].name}".`,
    node
  });
};

var checkProperties = function checkProperties(context, properties, matching, expectedParams) {
  properties.forEach(function (prop) {
    if (prop.value.type !== 'CallExpression') {
      reportNoSelector(context, prop, prop.key.name);
      return;
    }
    if (matching && !prop.value.callee.name.match(new RegExp(matching))) {
      reportWrongName(context, prop, prop.key.name, prop.value.callee.name, matching);
    }
    if (expectedParams) {
      var actualParams = prop.value.arguments;
      var propName = prop.key.name;
      var functionName = prop.value.callee.name;
      actualParams.forEach(function (param, i) {
        if (!expectedParams[i]) {
          reportUnexpectedParam(context, prop, propName, functionName, i);
          return;
        }
        if (param.name !== expectedParams[i].name) {
          reportInvalidParams(context, prop, propName, functionName, expectedParams, i);
        }
      });
    }
  });
};

var check = function check(context, node, matching, validateParams) {
  var returnNode = utils.getReturnNode(node);
  if (utils.isObject(returnNode)) {
    checkProperties(context, returnNode.properties, matching, validateParams && node.params);
  }
};

module.exports = function (context) {
  var config = context.options[0] || {};
  return {
    VariableDeclaration(node) {
      node.declarations.forEach(function (decl) {
        if (decl.id && decl.id.name === 'mapStateToProps') {
          if (decl.init && (decl.init.type === 'ArrowFunctionExpression' || decl.init.type === 'FunctionExpression')) {
            check(context, decl.init, config.matching, !(config.validateParams === false));
          }
        }
      });
    },
    FunctionDeclaration(node) {
      if (node.id && node.id.name === 'mapStateToProps') {
        check(context, node.body, config.matching, !(config.validateParams === false));
      }
    },
    CallExpression(node) {
      if (isReactReduxConnect(node)) {
        var mapStateToProps = node.arguments && node.arguments[0];
        if (mapStateToProps && (mapStateToProps.type === 'ArrowFunctionExpression' || mapStateToProps.type === 'FunctionExpression')) {
          check(context, mapStateToProps, config.matching, !(config.validateParams === false));
        }
      }
    }
  };
};