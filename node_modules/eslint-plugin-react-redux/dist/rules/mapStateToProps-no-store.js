'use strict';

var utils = require('../utils');
var isReactReduxConnect = require('../isReactReduxConnect');

var report = function report(context, node) {
  context.report({
    message: 'mapStateToProps should not return complete store object',
    node
  });
};

// first param name or false for destructuring assignment;
var getFirstParamName = function getFirstParamName(node) {
  var firstParam = node.params && node.params[0];
  return firstParam && firstParam.type === 'Identifier' && firstParam.name;
};

var propertyIsStore = function propertyIsStore(prop, storeName) {
  if (prop.type === 'Property' && prop.value && prop.value.name === storeName) {
    // state
    return true;
  } else if (
  // ...state
  prop.type === 'ExperimentalSpreadProperty' && prop.argument && prop.argument.type === 'Identifier' && prop.argument.name === storeName) {
    return true;
  }
  return false;
};

var checkFunction = function checkFunction(context, body, firstParamName) {
  var returnNode = utils.getReturnNode(body);
  // return state;
  if (returnNode && returnNode.type === 'Identifier' && returnNode.name === firstParamName) {
    report(context, body);
  }
  // return {store: state};
  if (returnNode && returnNode.type === 'ObjectExpression' && returnNode.properties.reduce(function (acc, cv) {
    return acc || propertyIsStore(cv, firstParamName);
  }, false)) {
    report(context, body);
  }
};

module.exports = function (context) {
  return {
    VariableDeclaration(node) {
      node.declarations.forEach(function (decl) {
        if (decl.id && decl.id.name === 'mapStateToProps') {
          var body = decl.init.body;
          var firstParamName = getFirstParamName(decl.init);
          if (firstParamName) {
            checkFunction(context, body, firstParamName);
          }
        }
      });
    },
    FunctionDeclaration(node) {
      if (node.id && node.id.name === 'mapStateToProps') {
        var firstParamName = getFirstParamName(node);
        if (firstParamName) {
          checkFunction(context, node.body, firstParamName);
        }
      }
    },
    CallExpression(node) {
      if (isReactReduxConnect(node)) {
        var mapStateToProps = node.arguments && node.arguments[0];
        if (mapStateToProps && mapStateToProps.body) {
          var firstParamName = getFirstParamName(mapStateToProps);
          if (firstParamName) {
            checkFunction(context, mapStateToProps.body, firstParamName);
          }
        }
      }
    }
  };
};