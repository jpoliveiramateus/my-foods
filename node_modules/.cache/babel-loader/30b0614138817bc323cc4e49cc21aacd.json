{"ast":null,"code":"var _jsxFileName = \"/home/portuga/trybe-projetos/sd-021-b-project-recipes-app/src/context/Provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport context from './context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWELVE = 12;\nconst error = 'Refeição não encontrada!';\n\nfunction Provider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [foods, setFoods] = useState([]);\n  const [filters, setFilters] = useState({\n    filter: '',\n    search: ''\n  });\n  useEffect(() => {\n    const fetchApiFood = async function () {\n      let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data.meals === null) {\n        global.alert(error);\n        return;\n      }\n\n      const foodList = data.meals.slice(0, TWELVE);\n      setFoods(foodList);\n    };\n\n    fetchApiFood(url);\n  }, []);\n  useEffect(() => {\n    let data;\n    let newListFood;\n\n    const fetchAPIFilters = async () => {\n      switch (filters.filter) {\n        case 'Ingredient':\n          if (filters.search === 'chicken') {\n            data = await fetchApiFood('https://www.themealdb.com/api/json/v1/1/filter.php?i=chicken');\n            break;\n          }\n\n          data = await fetchApiFood(`https://www.themealdb.com/api/json/v1/1/filter.php?i=${filters.search}`);\n          break;\n\n        case 'Name':\n          data = await fetchApiFood(`https://www.themealdb.com/api/json/v1/1/search.php?s=${filters.search}`);\n          newListFood = await data.json();\n\n          if (newListFood.meals === null) {\n            global.alert(error);\n            break;\n          }\n\n          setFoods(newListFood.meals.slice(0, TWELVE));\n          break;\n\n        case 'First Letter':\n          data = await fetchApiFood(`https://www.themealdb.com/api/json/v1/1/search.php?f=${filters.search}`);\n          newListFood = await data.json();\n\n          if (newListFood.meals === null) {\n            global.alert(error);\n            break;\n          }\n\n          setFoods(newListFood.meals.slice(0, TWELVE));\n          break;\n\n        default:\n          return null;\n      }\n    };\n\n    fetchAPIFilters();\n  }, [filters]);\n  return /*#__PURE__*/_jsxDEV(context.Provider, {\n    value: {\n      foods,\n      setFilters\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Provider, \"lr2oKBbudYsyyPv6E5fVKUyGTcw=\");\n\n_c = Provider;\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","context","TWELVE","error","Provider","children","foods","setFoods","filters","setFilters","filter","search","fetchApiFood","url","response","fetch","data","json","meals","global","alert","foodList","slice","newListFood","fetchAPIFilters","propTypes","node","isRequired"],"sources":["/home/portuga/trybe-projetos/sd-021-b-project-recipes-app/src/context/Provider.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport context from './context';\n\nconst TWELVE = 12;\n\nconst error = 'Refeição não encontrada!';\n\nfunction Provider({ children }) {\n  const [foods, setFoods] = useState([]);\n  const [filters, setFilters] = useState({ filter: '', search: '' });\n\n  useEffect(() => {\n    const fetchApiFood = async (url = 'https://www.themealdb.com/api/json/v1/1/search.php?s=') => {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (data.meals === null) {\n        global.alert(error);\n        return;\n      }\n      const foodList = data.meals.slice(0, TWELVE);\n      setFoods(foodList);\n    };\n    fetchApiFood(url);\n  }, []);\n\n  useEffect(() => {\n    let data;\n    let newListFood;\n    const fetchAPIFilters = async () => {\n      switch (filters.filter) {\n      case 'Ingredient':\n        if (filters.search === 'chicken') {\n          data = await fetchApiFood('https://www.themealdb.com/api/json/v1/1/filter.php?i=chicken');\n          break;\n        }\n        data = await fetchApiFood(`https://www.themealdb.com/api/json/v1/1/filter.php?i=${filters.search}`);\n        break;\n      case 'Name':\n        data = await fetchApiFood(`https://www.themealdb.com/api/json/v1/1/search.php?s=${filters.search}`);\n        newListFood = await data.json();\n        if (newListFood.meals === null) {\n          global.alert(error);\n          break;\n        }\n        setFoods(newListFood.meals.slice(0, TWELVE));\n        break;\n      case 'First Letter':\n        data = await fetchApiFood(`https://www.themealdb.com/api/json/v1/1/search.php?f=${filters.search}`);\n        newListFood = await data.json();\n        if (newListFood.meals === null) {\n          global.alert(error);\n          break;\n        }\n        setFoods(newListFood.meals.slice(0, TWELVE));\n        break;\n      default:\n        return null;\n      }\n    };\n    fetchAPIFilters();\n  }, [filters]);\n\n  return (\n    <context.Provider value={ { foods, setFilters } }>\n      {children}\n    </context.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,MAAM,GAAG,EAAf;AAEA,MAAMC,KAAK,GAAG,0BAAd;;AAEA,SAASC,QAAT,OAAgC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAC9B,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC;IAAEW,MAAM,EAAE,EAAV;IAAcC,MAAM,EAAE;EAAtB,CAAD,CAAtC;EAEAb,SAAS,CAAC,MAAM;IACd,MAAMc,YAAY,GAAG,kBAAyE;MAAA,IAAlEC,GAAkE,uEAA5D,uDAA4D;MAC5F,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;MACA,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;MACA,IAAID,IAAI,CAACE,KAAL,KAAe,IAAnB,EAAyB;QACvBC,MAAM,CAACC,KAAP,CAAajB,KAAb;QACA;MACD;;MACD,MAAMkB,QAAQ,GAAGL,IAAI,CAACE,KAAL,CAAWI,KAAX,CAAiB,CAAjB,EAAoBpB,MAApB,CAAjB;MACAK,QAAQ,CAACc,QAAD,CAAR;IACD,CATD;;IAUAT,YAAY,CAACC,GAAD,CAAZ;EACD,CAZQ,EAYN,EAZM,CAAT;EAcAf,SAAS,CAAC,MAAM;IACd,IAAIkB,IAAJ;IACA,IAAIO,WAAJ;;IACA,MAAMC,eAAe,GAAG,YAAY;MAClC,QAAQhB,OAAO,CAACE,MAAhB;QACA,KAAK,YAAL;UACE,IAAIF,OAAO,CAACG,MAAR,KAAmB,SAAvB,EAAkC;YAChCK,IAAI,GAAG,MAAMJ,YAAY,CAAC,8DAAD,CAAzB;YACA;UACD;;UACDI,IAAI,GAAG,MAAMJ,YAAY,CAAE,wDAAuDJ,OAAO,CAACG,MAAO,EAAxE,CAAzB;UACA;;QACF,KAAK,MAAL;UACEK,IAAI,GAAG,MAAMJ,YAAY,CAAE,wDAAuDJ,OAAO,CAACG,MAAO,EAAxE,CAAzB;UACAY,WAAW,GAAG,MAAMP,IAAI,CAACC,IAAL,EAApB;;UACA,IAAIM,WAAW,CAACL,KAAZ,KAAsB,IAA1B,EAAgC;YAC9BC,MAAM,CAACC,KAAP,CAAajB,KAAb;YACA;UACD;;UACDI,QAAQ,CAACgB,WAAW,CAACL,KAAZ,CAAkBI,KAAlB,CAAwB,CAAxB,EAA2BpB,MAA3B,CAAD,CAAR;UACA;;QACF,KAAK,cAAL;UACEc,IAAI,GAAG,MAAMJ,YAAY,CAAE,wDAAuDJ,OAAO,CAACG,MAAO,EAAxE,CAAzB;UACAY,WAAW,GAAG,MAAMP,IAAI,CAACC,IAAL,EAApB;;UACA,IAAIM,WAAW,CAACL,KAAZ,KAAsB,IAA1B,EAAgC;YAC9BC,MAAM,CAACC,KAAP,CAAajB,KAAb;YACA;UACD;;UACDI,QAAQ,CAACgB,WAAW,CAACL,KAAZ,CAAkBI,KAAlB,CAAwB,CAAxB,EAA2BpB,MAA3B,CAAD,CAAR;UACA;;QACF;UACE,OAAO,IAAP;MA3BF;IA6BD,CA9BD;;IA+BAsB,eAAe;EAChB,CAnCQ,EAmCN,CAAChB,OAAD,CAnCM,CAAT;EAqCA,oBACE,QAAC,OAAD,CAAS,QAAT;IAAkB,KAAK,EAAG;MAAEF,KAAF;MAASG;IAAT,CAA1B;IAAA,UACGJ;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GA5DQD,Q;;KAAAA,Q;AA8DTA,QAAQ,CAACqB,SAAT,GAAqB;EACnBpB,QAAQ,EAAEL,SAAS,CAAC0B,IAAV,CAAeC;AADN,CAArB;AAIA,eAAevB,QAAf"},"metadata":{},"sourceType":"module"}