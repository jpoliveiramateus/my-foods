{"ast":null,"code":"var _jsxFileName = \"/home/portuga/trybe-projetos/sd-021-b-project-recipes-app/src/context/Provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport context from './context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWELVE = 12;\nconst error = 'Sorry, we haven\\'t found any recipes for these filters.';\n\nfunction Provider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [foods, setFoods] = useState([]);\n  const [drinks, setDrinks] = useState([]);\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({\n    filter: '',\n    search: ''\n  });\n  const [url, setUrl] = useState('https://www.themealdb.com/api/json/v1/1/search.php?s=');\n  const [urlDrink, setUrlDrink] = useState('https://www.thecocktaildb.com/api/json/v1/1/search.php?s=');\n  const history = useHistory();\n\n  const checkResult = category => {\n    if (data[category] === null) {\n      global.alert(error);\n      return null;\n    }\n\n    const foodList = data.meals.slice(0, TWELVE);\n    setFoods(foodList);\n  };\n\n  useEffect(() => {\n    const fetchApiFood = async () => {\n      const response = await fetch(url);\n      const newData = await response.json();\n      setData(newData);\n      checkResult();\n    };\n\n    fetchApiFood();\n  }, [url]); // useEffect(() => {\n  //   const fetchApiDrink = async () => {\n  //     const response = await fetch(urlDrink);\n  //     const data = await response.json();\n  //     if (data.drinks === null) {\n  //       global.alert(error);\n  //       return null;\n  //     }\n  //     const drinkList = data.drinks.slice(0, TWELVE);\n  //     setDrinks(drinkList);\n  //   };\n  //   fetchApiDrink();\n  // }, [urlDrink]);\n\n  useEffect(() => {\n    const fetchAPIFilters = () => {\n      if (history.location.pathname === '/drinks') {\n        switch (filters.filter) {\n          case 'Ingredient':\n            setUrlDrink(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${filters.search}`);\n            break;\n\n          case 'Name':\n            setUrlDrink(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${filters.search}`);\n            break;\n\n          case 'First Letter':\n            setUrlDrink(`https://www.thecocktaildb.com/api/json/v1/1/search.php?f=${filters.search}`);\n            break;\n\n          default:\n            return null;\n        }\n      }\n\n      switch (filters.filter) {\n        case 'Ingredient':\n          if (filters.search === 'chicken') {\n            setUrl('https://www.themealdb.com/api/json/v1/1/filter.php?i=chicken');\n            break;\n          }\n\n          setUrl(`https://www.themealdb.com/api/json/v1/1/filter.php?i=${filters.search}`);\n          break;\n\n        case 'Name':\n          setUrl(`https://www.themealdb.com/api/json/v1/1/search.php?s=${filters.search}`);\n          break;\n\n        case 'First Letter':\n          setUrl(`https://www.themealdb.com/api/json/v1/1/search.php?f=${filters.search}`);\n          break;\n\n        default:\n          return null;\n      }\n    };\n\n    fetchAPIFilters();\n  }, [filters, history]);\n  return /*#__PURE__*/_jsxDEV(context.Provider, {\n    value: {\n      foods,\n      setFilters,\n      drinks\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Provider, \"TfxshnakATCR6+S5e78jUFuLMaU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Provider;\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","useHistory","context","TWELVE","error","Provider","children","foods","setFoods","drinks","setDrinks","data","setData","filters","setFilters","filter","search","url","setUrl","urlDrink","setUrlDrink","history","checkResult","category","global","alert","foodList","meals","slice","fetchApiFood","response","fetch","newData","json","fetchAPIFilters","location","pathname","propTypes","node","isRequired"],"sources":["/home/portuga/trybe-projetos/sd-021-b-project-recipes-app/src/context/Provider.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport context from './context';\n\nconst TWELVE = 12;\n\nconst error = 'Sorry, we haven\\'t found any recipes for these filters.';\n\nfunction Provider({ children }) {\n  const [foods, setFoods] = useState([]);\n  const [drinks, setDrinks] = useState([]);\n  const [data, setData] = useState([]);\n  const [filters, setFilters] = useState({ filter: '', search: '' });\n  const [url, setUrl] = useState('https://www.themealdb.com/api/json/v1/1/search.php?s=');\n  const [urlDrink, setUrlDrink] = useState('https://www.thecocktaildb.com/api/json/v1/1/search.php?s=');\n  const history = useHistory();\n\n  const checkResult = (category) => {\n    if (data[category] === null) {\n      global.alert(error);\n      return null;\n    }\n    const foodList = data.meals.slice(0, TWELVE);\n    setFoods(foodList);\n  };\n\n  useEffect(() => {\n    const fetchApiFood = async () => {\n      const response = await fetch(url);\n      const newData = await response.json();\n      setData(newData);\n      checkResult();\n    };\n    fetchApiFood();\n  }, [url]);\n\n  // useEffect(() => {\n  //   const fetchApiDrink = async () => {\n  //     const response = await fetch(urlDrink);\n  //     const data = await response.json();\n  //     if (data.drinks === null) {\n  //       global.alert(error);\n  //       return null;\n  //     }\n  //     const drinkList = data.drinks.slice(0, TWELVE);\n  //     setDrinks(drinkList);\n  //   };\n  //   fetchApiDrink();\n  // }, [urlDrink]);\n\n  useEffect(() => {\n    const fetchAPIFilters = () => {\n      if (history.location.pathname === '/drinks') {\n        switch (filters.filter) {\n        case 'Ingredient':\n          setUrlDrink(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${filters.search}`);\n          break;\n        case 'Name':\n          setUrlDrink(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${filters.search}`);\n          break;\n        case 'First Letter':\n          setUrlDrink(`https://www.thecocktaildb.com/api/json/v1/1/search.php?f=${filters.search}`);\n          break;\n        default:\n          return null;\n        }\n      }\n      switch (filters.filter) {\n      case 'Ingredient':\n        if (filters.search === 'chicken') {\n          setUrl('https://www.themealdb.com/api/json/v1/1/filter.php?i=chicken');\n          break;\n        }\n        setUrl(`https://www.themealdb.com/api/json/v1/1/filter.php?i=${filters.search}`);\n        break;\n      case 'Name':\n        setUrl(`https://www.themealdb.com/api/json/v1/1/search.php?s=${filters.search}`);\n        break;\n      case 'First Letter':\n        setUrl(`https://www.themealdb.com/api/json/v1/1/search.php?f=${filters.search}`);\n        break;\n      default:\n        return null;\n      }\n    };\n    fetchAPIFilters();\n  }, [filters, history]);\n\n  return (\n    <context.Provider value={ { foods, setFilters, drinks } }>\n      {children}\n    </context.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}